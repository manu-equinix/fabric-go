diff --git a/fabric/v4/api_routing_protocols.go b/fabric/v4/api_routing_protocols.go
index cab7208..e41eda0 100644
--- a/fabric/v4/api_routing_protocols.go
+++ b/fabric/v4/api_routing_protocols.go
@@ -35,6 +35,39 @@ This API provides capability to create Routing Protocol for connections
  * @param connectionId Connection Id
 @return RoutingProtocolData
 */
+
+func (a *RoutingProtocolsApiService) decodeRP(v *RoutingProtocolData, b []byte, contentType string) (err error) {
+       //get type of response body
+       var (
+               localVarReturnBGP    RoutingProtocolBgpData
+               localVarReturnDirect RoutingProtocolDirectData
+       )
+
+       err = a.client.decode(&v, b, contentType)
+       if err != nil {
+               return err
+       }
+       // decode response based on type, overwrite return value's oneof field
+       if v.Type_ == "BGP" {
+               // If we succeed, return the data, otherwise pass on to decode error.
+               err = a.client.decode(&localVarReturnBGP, b, contentType)
+               // try decoding as a bgp, return if no error
+               if err == nil {
+                       v.RoutingProtocolBgpData = localVarReturnBGP
+                       return err
+               }
+       }
+       if v.Type_ == "DIRECT" {
+               // try decoding as a direct rp
+               err = a.client.decode(&localVarReturnDirect, b, contentType)
+               if err == nil {
+                       v.RoutingProtocolDirectData = localVarReturnDirect
+                       return err
+               }
+       }
+       return err
+}
+
 func (a *RoutingProtocolsApiService) CreateConnectionRoutingProtocol(ctx context.Context, body RoutingProtocolBase, connectionId string) (RoutingProtocolData, *http.Response, error) {
        var (
                localVarHttpMethod  = strings.ToUpper("Post")
@@ -89,8 +122,8 @@ func (a *RoutingProtocolsApiService) CreateConnectionRoutingProtocol(ctx context

        if localVarHttpResponse.StatusCode < 300 {
                // If we succeed, return the data, otherwise pass on to decode error.
-               err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-               if err == nil {
+               err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+               if err != nil {
                        return localVarReturnValue, localVarHttpResponse, err
                }
        }
@@ -102,7 +135,7 @@ func (a *RoutingProtocolsApiService) CreateConnectionRoutingProtocol(ctx context
                }
                if localVarHttpResponse.StatusCode == 202 {
                        var v RoutingProtocolData
-                       err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+                       err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                        if err != nil {
                                newErr.error = err.Error()
                                return localVarReturnValue, localVarHttpResponse, newErr
@@ -238,6 +271,7 @@ func (a *RoutingProtocolsApiService) CreateConnectionRoutingProtocolsInBulk(ctx

        if localVarHttpResponse.StatusCode < 300 {
                // If we succeed, return the data, otherwise pass on to decode error.
+               // fixme: why is this a get response?
                err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                if err == nil {
                        return localVarReturnValue, localVarHttpResponse, err
@@ -386,7 +420,7 @@ func (a *RoutingProtocolsApiService) DeleteConnectionRoutingProtocolByUuid(ctx c

        if localVarHttpResponse.StatusCode < 300 {
                // If we succeed, return the data, otherwise pass on to decode error.
-               err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+               err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                if err == nil {
                        return localVarReturnValue, localVarHttpResponse, err
                }
@@ -399,7 +433,7 @@ func (a *RoutingProtocolsApiService) DeleteConnectionRoutingProtocolByUuid(ctx c
                }
                if localVarHttpResponse.StatusCode == 202 {
                        var v RoutingProtocolData
-                       err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+                       err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                        if err != nil {
                                newErr.error = err.Error()
                                return localVarReturnValue, localVarHttpResponse, newErr
@@ -697,7 +731,7 @@ func (a *RoutingProtocolsApiService) GetConnectionRoutingProtocolByUuid(ctx cont

        if localVarHttpResponse.StatusCode < 300 {
                // If we succeed, return the data, otherwise pass on to decode error.
-               err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+               err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                if err == nil {
                        return localVarReturnValue, localVarHttpResponse, err
                }
@@ -710,7 +744,7 @@ func (a *RoutingProtocolsApiService) GetConnectionRoutingProtocolByUuid(ctx cont
                }
                if localVarHttpResponse.StatusCode == 200 {
                        var v RoutingProtocolData
-                       err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+                       err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                        if err != nil {
                                newErr.error = err.Error()
                                return localVarReturnValue, localVarHttpResponse, newErr
@@ -1432,7 +1466,7 @@ func (a *RoutingProtocolsApiService) PatchConnectionRoutingProtocolByUuid(ctx co

        if localVarHttpResponse.StatusCode < 300 {
                // If we succeed, return the data, otherwise pass on to decode error.
-               err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+               err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                if err == nil {
                        return localVarReturnValue, localVarHttpResponse, err
                }
@@ -1445,7 +1479,7 @@ func (a *RoutingProtocolsApiService) PatchConnectionRoutingProtocolByUuid(ctx co
                }
                if localVarHttpResponse.StatusCode == 202 {
                        var v RoutingProtocolData
-                       err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+                       err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                        if err != nil {
                                newErr.error = err.Error()
                                return localVarReturnValue, localVarHttpResponse, newErr
@@ -1734,7 +1768,7 @@ func (a *RoutingProtocolsApiService) ReplaceConnectionRoutingProtocolByUuid(ctx

        if localVarHttpResponse.StatusCode < 300 {
                // If we succeed, return the data, otherwise pass on to decode error.
-               err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+               err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                if err == nil {
                        return localVarReturnValue, localVarHttpResponse, err
                }
@@ -1747,7 +1781,7 @@ func (a *RoutingProtocolsApiService) ReplaceConnectionRoutingProtocolByUuid(ctx
                }
                if localVarHttpResponse.StatusCode == 202 {
                        var v RoutingProtocolData
-                       err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+                       err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
                        if err != nil {
                                newErr.error = err.Error()
                                return localVarReturnValue, localVarHttpResponse, newErr
@@ -1819,4 +1853,4 @@ func (a *RoutingProtocolsApiService) ReplaceConnectionRoutingProtocolByUuid(ctx
        }

        return localVarReturnValue, localVarHttpResponse, nil
-}
+}
\ No newline at end of file
